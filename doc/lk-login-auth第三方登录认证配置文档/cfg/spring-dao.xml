<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/task 
    http://www.springframework.org/schema/task/spring-task-3.0.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
		
       <!--数据库连接配置信息-->
       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    	 <property name="url" value="jdbc:oracle:thin:@192.168.252.36:1522:uosdev" />
     	 <property name="username" value="plmgr" />
         <property name="password" value="plmgr_dev"/>
         <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
         <property name="initialSize" value="20" />
         <!-- 最大连接池数量 -->
     	 <property name="maxActive" value="50" />
     	 <!-- 最小连接池数量 -->
     	 <property name="minIdle" value="20" />
     	 <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
     	 <property name="maxWait" value="60000" />
     	 <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
     	 <property name="poolPreparedStatements" value="true" />
     	 <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
     	 <property name="maxOpenPreparedStatements" value="100" />
     	 <!-- 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法 -->
     	 <property name="validationQueryTimeout" value="60" />
     	 <!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
     	 <property name="validationQuery" value="SELECT 'x' FROM DUAL" />
     	 <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
     	 <property name="testWhileIdle" value="true" />
     	 <!-- 有两个含义：1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
     	 <property name="timeBetweenEvictionRunsMillis" value="60000" />
     	 <!-- 连接保持空闲而不被驱逐的最长时间 -->
     	 <property name="minEvictableIdleTimeMillis" value="300000" />
     	 <!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
     	 <!--<property name="filters" value="stat,config" />-->
     	 <!-- 设置密码加密 -->
     	 <!--<property name="connectionProperties" value="config.decrypt=true" />-->
    </bean>
    <!-- redis 连接设置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal">
        	<value>200</value>
        </property>
        <property name="maxIdle">
         	<value>5</value>
        </property>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
    </bean>
	
	<bean id="redisPasswordAdapt"  class="com.linekong.login.auth.dao.redis.RedisPasswordAdapt">
    	<property name="password" value="redis://:64c5fd2979a86168@192.168.252.37:6379/0"></property>
    </bean>

    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool"  scope="singleton">
        <constructor-arg ref="jedisPoolConfig" />
        <constructor-arg >
            <list>
                <bean class="com.linekong.login.auth.dao.redis.JedisShardInfoAdapt">
                    <constructor-arg ref="redisPasswordAdapt" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

	
<!--     <beans profile="active"> -->
<!-- 		<bean id="usedTokenInfoDeleteJob" class="com.linekong.login.auth.quartzjobs.job.UsedTokenInfoDeleteJob" />
		<task:scheduled-tasks>
			 cron = 秒 分 时 日 月 周 
			<task:scheduled ref="usedTokenInfoDeleteJob" method="execute" cron="0 0/1 * * * ?"/>
		</task:scheduled-tasks> -->
<!-- 	</beans> -->
</beans>
